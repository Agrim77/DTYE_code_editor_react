{"version":3,"sources":["components/Editor.js","hooks/useLocalStorage.js","components/App.js","index.js"],"names":["Editor","props","language","displayName","value","onChange","useState","open","setOpen","className","type","onClick","prevOpen","icon","faCompressAlt","faExpandAlt","onBeforeChange","editor","data","options","lineWrapping","lint","mode","theme","lineNumbers","useLocalStorage","key","initialValue","prefixedKey","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","a11yProps","index","id","useStyles","makeStyles","root","flexGrow","backgroundColor","palette","background","paper","TabPanel","children","other","role","hidden","aria-labelledby","Box","p","Typography","App","html","setHtml","css","setCss","js","setJs","srcDoc","setSrcDoc","classes","React","timeout","setTimeout","clearTimeout","AppBar","position","Tabs","event","newValue","aria-label","Tab","label","title","sandbox","frameBorder","width","height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e307e0e7.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\n//i used codemirror library for text editor implementation. Check out https://codemirror.net for more.\nimport 'codemirror/lib/codemirror.css'\nimport 'codemirror/theme/material.css'\n//for html\nimport 'codemirror/mode/xml/xml'\n//for javascript\nimport 'codemirror/mode/javascript/javascript'\n//for css\nimport 'codemirror/mode/css/css'\nimport { Controlled as ControlledEditor } from 'react-codemirror2'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCompressAlt, faExpandAlt } from '@fortawesome/free-solid-svg-icons'\n\n//props to get information from editor\nexport default function Editor(props) {\n    const {\n        language,\n        displayName,\n        value,\n        onChange\n    } = props\n    const [open, setOpen] = useState(true)\n\n    function handleChange(editor, data, value) {\n        onChange(value)\n    }\n\n    return (\n        //editor area container and setup\n        <div className={`editor-container ${open ? '' : 'collapsed'}`}>\n          <div className=\"editor-title\">\n            {displayName}\n            <button\n              type=\"button\"\n              className=\"expand-collapse-btn\"\n              onClick={() => setOpen(prevOpen => !prevOpen)}\n            >\n              <FontAwesomeIcon icon={open ? faCompressAlt : faExpandAlt} />\n            </button>\n          </div>\n          <ControlledEditor\n            onBeforeChange={handleChange}\n            value={value}\n            className=\"code-mirror-wrapper\"\n            options={{\n              lineWrapping: true,\n              lint: true,\n              mode: language,\n              theme: 'material', //for dark theme\n              lineNumbers: true\n            }}\n          />\n        </div>\n      )\n    }\n    ","import { useEffect, useState } from 'react'\n\n//works as unique identifier while working on localhost (save last used data)\nconst PREFIX = 'agrim-'\n\nexport default function useLocalStorage(key, initialValue) {\n    const prefixedKey = PREFIX + key\n\n    // useState is to get value from localStorage only once as it is a slow process\n    const [value, setValue] = useState(() => {\n        const jsonValue = localStorage.getItem(prefixedKey)\n        if (jsonValue != null) return JSON.parse(jsonValue)\n\n        // to check if App.js is giving any initial value or not\n        if (typeof initialValue === 'function') {\n            return initialValue()\n        } else {\n            return initialValue\n        }\n    })\n\n    // fucntion to update local storage\n    useEffect(() => {\n        localStorage.setItem(prefixedKey, JSON.stringify(value))\n    }, [prefixedKey, value])\n\n    return [value, setValue]\n}","import React, { useState, useEffect } from \"react\";\nimport Editor from \"./Editor\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\n//a11yProps is function used for making file explorer\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    \"aria-controls\": `simple-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\n//using different props for tab panel (file explorer)\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nfunction App() {\n  const [html, setHtml] = useLocalStorage(\"html\", \"\");\n  const [css, setCss] = useLocalStorage(\"css\", \"\");\n  const [js, setJs] = useLocalStorage(\"js\", \"\");\n  //we need source doc to render output in live area. We use it in iframe.\n  const [srcDoc, setSrcDoc] = useState(\"\");\n\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  //use effect is to render output to live area after a delay of 250ms. \n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setSrcDoc(`\n        <html>\n          <body>${html}</body>\n          <style>${css}</style>\n          <script>${js}</script>\n        </html>\n      `);\n    }, 250);\n\n    return () => clearTimeout(timeout);\n  }, [html, css, js]);\n\n  return (\n    <>\n      <div className={classes.root}>\n        <AppBar position=\"static\">\n          <Tabs value={value} onChange={handleChange} aria-label=\"Top Tabs\">\n            <Tab label=\"HTML\" {...a11yProps(0)} />\n            <Tab label=\"CSS\" {...a11yProps(1)} />\n            <Tab label=\"JS\" {...a11yProps(2)} />\n          </Tabs>\n        </AppBar>\n\n        {/* top pane */}\n        <div className=\"pane top-pane\">\n          <TabPanel value={value} index={0}>\n            <Editor\n              language=\"xml\"\n              displayName=\"HTML\"\n              value={html}\n              onChange={setHtml}\n            />\n          </TabPanel>\n          <TabPanel value={value} index={1}>\n            <Editor\n              language=\"css\"\n              displayName=\"CSS\"\n              value={css}\n              onChange={setCss}\n            />\n          </TabPanel>\n          <TabPanel value={value} index={2}>\n            <Editor\n              language=\"javascript\"\n              displayName=\"JS\"\n              value={js}\n              onChange={setJs}\n            />\n          </TabPanel>\n        </div>\n      </div>\n      {/* bottom pane */}\n      <div className=\"pane\">\n        {/* need iframe to render html, css and javascript */}\n        <iframe\n          srcDoc={srcDoc}\n          title=\"output\"\n          sandbox=\"allow-scripts\"\n          frameBorder=\"0\"\n          width=\"100%\"\n          height=\"100%\"\n        />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}