{"ast":null,"code":"import { useEffect, useState } from 'react';\nconst PREFIX = '';\nexport default function useLocalStorage(key, initialValue) {\n  const prefixedKey = PREFIX + key; //useState is to get value from localStorage only once as it is a slow process\n\n  const [value, setValue] = useState(() => {\n    const jsonValue = localStorage.getItem(prefixedKey);\n    if (jsonValue != null) return JSON.parse(jsonValue); //to check if App.js is giving any initial value or not\n\n    if (typeof initialValue === 'function') {\n      return initialValue();\n    } else {\n      return initialValue;\n    }\n  }); //fucntion to update local storage\n\n  useEffect(() => {\n    localStorage.setItem(prefixedKey, JSON.stringify(value));\n  }, [prefixedKey, value]);\n  return [value, setValue];\n}","map":{"version":3,"sources":["/Users/agrimsharma/Downloads/React-CodePen-Clone/src/hooks/useLocalStorage.js"],"names":["useEffect","useState","PREFIX","useLocalStorage","key","initialValue","prefixedKey","value","setValue","jsonValue","localStorage","getItem","JSON","parse","setItem","stringify"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,MAAMC,MAAM,GAAG,EAAf;AAEA,eAAe,SAASC,eAAT,CAAyBC,GAAzB,EAA8BC,YAA9B,EAA4C;AACzD,QAAMC,WAAW,GAAGJ,MAAM,GAAGE,GAA7B,CADyD,CAGzD;;AACA,QAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,MAAM;AACvC,UAAMQ,SAAS,GAAGC,YAAY,CAACC,OAAb,CAAqBL,WAArB,CAAlB;AACA,QAAIG,SAAS,IAAI,IAAjB,EAAuB,OAAOG,IAAI,CAACC,KAAL,CAAWJ,SAAX,CAAP,CAFgB,CAIvC;;AACA,QAAI,OAAOJ,YAAP,KAAwB,UAA5B,EAAwC;AACtC,aAAOA,YAAY,EAAnB;AACD,KAFD,MAEO;AACL,aAAOA,YAAP;AACD;AACF,GAViC,CAAlC,CAJyD,CAgBzD;;AACAL,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,YAAY,CAACI,OAAb,CAAqBR,WAArB,EAAkCM,IAAI,CAACG,SAAL,CAAeR,KAAf,CAAlC;AACD,GAFQ,EAEN,CAACD,WAAD,EAAcC,KAAd,CAFM,CAAT;AAIA,SAAO,CAACA,KAAD,EAAQC,QAAR,CAAP;AACD","sourcesContent":["import { useEffect, useState } from 'react'\n\nconst PREFIX = ''\n\nexport default function useLocalStorage(key, initialValue) {\n  const prefixedKey = PREFIX + key\n\n  //useState is to get value from localStorage only once as it is a slow process\n  const [value, setValue] = useState(() => {\n    const jsonValue = localStorage.getItem(prefixedKey)\n    if (jsonValue != null) return JSON.parse(jsonValue)\n   \n    //to check if App.js is giving any initial value or not\n    if (typeof initialValue === 'function') {\n      return initialValue()\n    } else {\n      return initialValue\n    }\n  })\n\n  //fucntion to update local storage\n  useEffect(() => {\n    localStorage.setItem(prefixedKey, JSON.stringify(value))\n  }, [prefixedKey, value])\n\n  return [value, setValue]\n}\n"]},"metadata":{},"sourceType":"module"}